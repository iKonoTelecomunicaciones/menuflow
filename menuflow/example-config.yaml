menuflow:
    database: postgresql://menuflow:secretfoo@postgres/menuflow
    database_opts:
        min_size: 1
        max_size: 10

    sync:
        # You can use of the fields defined in RoomEventFilter, for more information:
        # https://github.com/mautrix/python/blob/master/mautrix/types/filter.py#L57
        room_event_filter:
            limit: 5
            lazy_load_members: true

    # Ignore messages or invitations from this users, it accepts user_ids and regex
    ignore:
        messages_from:
            - "@whatsappbot:example.com"
            - "@admin:example.com"

        invitations_from:
            - "@whatsappbot:example.com"
            - "@admin:example.com"

    # It defines how much time have to wait an HTTP request or middleware before raise a timeout error,
    # it's important that middlewares will have a time minor to http_request
    # because jwt request shouldn't take much time, and it can stop http_request too much time.
    timeouts:
        http_request: 60 #seconds
        middlewares: 60 #seconds

    # Do you want the menu to generate a typing notification event before sending messages to rooms?
    # The range is related to the time duration of the write notification event.
    typing_notification:
        enable: true
        start: 1
        end: 3

    # It defines how much time to wait between two consecutive messages from the customer to process the message
    # it's to avoid sending too much messages to the customer
    message_rate_limit: 1 #seconds

    # It defines which is the source of the flow, it can be a yaml file or a database
    # - yaml: the flow is defined in a yaml file
    # - database: the flow is defined in a database
    load_flow_from: "yaml"

    regex:
        room_id: ^![\w-]+:[\w.-]+$

    # Limit of backups to keep per flow
    backup_limit: 10

    # State key to identify the m.bridge event in the new way of identify the creator of the room
    mautrix_state_key: example.com/mx_whatsapp

    # This section is used to handle and avoid a menubot war with external bots
    bot_war:
        # The time when we're going to check if the message limit is reached after of the first message
        init_checker_limit_timer: 10
        # The message threshold to consider that it's a bot war if the limit is reached between the checker limit timer
        message_threshold: 10
        # The time to ignore and restore the conversation after to check if the message limit is reached
        time_to_ignore: 30
        # This multiplier is used to increase the time to ignore the conversation
        time_multiplier: 2
        # The sometimes when the conversations are ignored. If this value is higher, the time to ignore increases.
        # This value also will be used to tag and ignore definitely the conversation while a supervisor takes a decision
        sometimes_ignored_threshold: 3

server:
    # The IP and port to listen to.
    hostname: 0.0.0.0
    port: 29400
    # Public base URL where the server is visible.
    public_url: https://example.com
    # The base management API path.
    base_path: /_matrix/menuflow

    # The shared secret to sign API access tokens.
    # Set to "generate" to generate and save a new token at startup.
    unshared_secret: generate

events:
    write_to_file: false
    # Do you want that nodes generate events when they are excecuted?
    send_events: true
    # Sqlite database can be use to store all events or only save fail events to retry later
    # - all: all events are stored in sqlite database
    # - buffer: only fail events are stored in sqlite database
    sqlite_action: "buffer"


# Nats configuration
nats:
    enabled: false
    # Nats server address
    address: "nats://nats:4222"
    # Nats user
    user: "nats"
    # Nats password
    password: "nats"
    # Stream name to publish messages
    stream: "MENUFLOW_COMPANY_NAME"
    # Subject to publish messages
    subject: "menuflow.company_name"

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): menuflow.utils.color_log.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./menuflow.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        menuflow:
            level: DEBUG
        mau:
            level: DEBUG
        aiohttp:
            level: INFO
        report:
            level: DEBUG
        nats:
            level: DEBUG

    root:
        level: DEBUG
        handlers: [file, console]
